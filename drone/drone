#!/usr/bin/python

CONFIG_FILE = "/etc/soton/drone.conf"
BASE_DIR    = "/etc/soton"
VERSION     = "2016-11-23-1"

import os
import sys
import argparse
import subprocess
import ConfigParser
import datetime

################################################################################

def fatal(code,message):
	sys.stderr.write("Error: " + message + "\n")
	sys.exit(code)

################################################################################

def fatalex(code,message,exception):
	sys.stderr.write("Error: " + message + " - " + str(type(ex)) + " " + str(ex) + "\n")
	sys.exit(code)

################################################################################

def strtime():
	return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

################################################################################

def get_config():
	config = ConfigParser.RawConfigParser()

	## Set up default sections
	config.add_section('backup')
	config.add_section('puppet')
	config.add_section('server')
	config.add_section('ssh')
	
	## Set up default values
	config.set('backup','user','backup')
	config.set('backup','server','localhost')
	config.set('backup','rsyncd_port','873')
	config.set('backup','port','9999')

	config.set('puppet','user','puppet')
	config.set('puppet','binary','/opt/puppetlabs/bin/puppet')
	config.set('puppet','server','localhost')

	config.set('ssh','binary','/usr/bin/ssh')

	try:
		config.read(CONFIG_FILE)
	except Exception as ex:
		fatalex(2,"Could not read the config file " + CONFIG_FILE,ex)

	return config

################################################################################

def sysexec(command,shell=False,debug=False):
	if debug:
		if type(command) is list:
			print "Executing command " + str(" ".join(command))
		else:
			print "Executing command " + str(command)

	try:
		proc = subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.STDOUT,shell=shell)
		(stdoutdata, stderrdata) = proc.communicate()
		if stdoutdata is None:
			stdoutdata = ""
		if stderrdata is None:
			stderrdata = ""

		if debug:
			print "return code: " + str(proc.returncode)
			print "---"
			print stdoutdata
			print stderrdata
			print "---"
			
		return (proc.returncode,str(stdoutdata),str(stderrdata))
	except Exception as ex:
		return (1,"",str(type(ex)) + " " + str(ex))

################################################################################

def puppet_sync(parser,args,config):
	if args.verbose: print "starting sync"

	(code, stdout, stderr) = sysexec("""/usr/bin/rsync -e "ssh -i %s/ssh_private_key -o PreferredAuthentications=publickey -oStrictHostKeyChecking=no" -av --delete %s@%s: %s/puppet/""" % (BASE_DIR, config.get('puppet','user'),config.get('puppet','server'),BASE_DIR),shell=True,debug=args.debug)

	if code != 0:
		fatal(3,"sync failed: \n" + stdout + "\n" + stderr)
	else:
		if args.verbose: print "sync complete"

################################################################################

def puppet_apply(parser,args,config):
	if args.verbose: print "starting puppet apply"

	(code, stdout, stderr) = sysexec("""%s apply --detailed-exitcodes --modulepath %s/puppet/modules/ %s/puppet/manifests/site.pp""" % (config.get('puppet','binary'),BASE_DIR,BASE_DIR),shell=True,debug=args.debug)

	when = "puppet apply last ran at " + strtime() + "\n"

	if code == 0:
		status = "system complies with policy, no changes were required"
		if args.verbose: print status
	elif code == 2:
		status = "system complies with policy, changes made to system:"
		status = status + "\n" + stdout
		if args.verbose: print status

	else:
		status = "apply failed: \n" + stdout + "\n" + stderr
		puppet_save_state(when + status)
		fatal(4,status)

	puppet_save_state(when + status)

################################################################################

def puppet_save_state(status):
	try:
		if not os.path.exists(BASE_DIR + "/state"):
			os.mkdir(BASE_DIR + "/state")
	except Exception as ex:
		sys.stderr.write("Warning! Could not create directory " + BASE_DIR + "/state - unable to save puppet status")

	try:
		with open(BASE_DIR + "/state/puppet","w") as fp:
			fp.write(status + "\n")
	except Exception as ex:
		sys.stderr.write("Warning! Could not write to " + BASE_DIR + "/state/puppet - unable to save puppet status")

################################################################################

def puppet_get_state(parser,ars,config):
	status_file = BASE_DIR + "/state/puppet" 

	if os.path.exists(status_file):

		try:
			with open(status_file,"r") as fp:
				sys.stdout.write(fp.read())
		except Exception as ex:
			fatalex(5,"Could not read from puppet status file " + status_file,ex)
	else:
		print "puppet apply has never been run on this system"

################################################################################

def puppet(parser,args,config):
	action = args.action

	if action == 'sync':
		puppet_sync(parser,args,config)

	elif action == "apply":
		puppet_apply(parser,args,config)

	elif action == "run":
		puppet_sync(parser,args,config)
		puppet_apply(parser,args,config)

	elif action == "status":
		puppet_get_state(parser,args,config)

	else:
		print 'Unrecognised or missing action'
		parser.print_help()

################################################################################

def backup_now(parser,args,config):
	#ssh backup@play01020.soton.ac.uk -i /etc/soton/ssh_private_key -R 10000:localhost:873 -o "ExitOnForwardFailure yes"

	if args.verbose: print "starting backup (this may take several minutes)"

	(code, stdout, stderr) = sysexec("""%s %s@%s -i %s/ssh_private_key -o "ExitOnForwardFailure yes" -R %s:localhost:%s """ % (config.get('ssh','binary'), config.get('backup','user'), config.get('backup','server'), BASE_DIR, config.get('backup','port'),config.get('backup','rsyncd_port'),),shell=True,debug=args.debug)

	if code != 0:
		fatal(6,"backup failed: \n" + stdout + "\n" + stderr)
	else:
		if args.verbose: print "backup complete"

################################################################################

def backup(parser,args,config):
	action = args.action

	if action == 'now':
		backup_now(parser,args,config)

	elif action == "status":
		print 'Not yet implemented'

	elif action == "enable":
		print 'Not yet implemented'

	elif action == "disable":
		print 'Not yet implemented'

	else:
		print 'Unrecognised or missing action'
		parser.print_help()

################################################################################

def update(parser,args,config):
	pass

################################################################################

def version(parser,args,config):
	print "drone agent v" + VERSION

################################################################################

def main():
	## We must be root
	if not os.geteuid() == 0:
		sys.stderr.write("Error: You must be root to run that command\n")
		sys.exit(1)

	## Load the config
	config = get_config()

	## Deal with command line arguments
	subcommands = """Available subcommands:

  puppet      manages puppet functions
    status    show the status of the last puppet apply
    sync      download the latest puppet ruleset
    apply     apply puppet policy to the system
    run       performs a 'sync' and then an 'apply'
    enable    turn on automatic policy enforcement (default on)
    disable   turn off automatic policy enforcement 

  backup      management of workstation backups
    status    show the status of the last backup
    now       perform a backup of this system
    enable    enable automatic backups (default on)
    disable   disable automatic backups

  update
    status    show the update status of the system
    schedule  schedule updates to be applied at next reboot

  system
    register  (re-)register this system

  version     shows the version of the drone agent
    
"""

	parser = argparse.ArgumentParser(prog='drone',description='workstation management agent',epilog=subcommands,formatter_class=argparse.RawDescriptionHelpFormatter)
	parser.add_argument('subcommand', metavar='subcommand', type=str, help='the function to perform')
	parser.add_argument('action', metavar='action', type=str, help='the action to perform', nargs="?", default=None)
	parser.add_argument('-d', '--debug', action='store_true', help='turn on debugging output',dest='debug')
	parser.add_argument('-v', '--verbose', action='store_true', help='turn on verbose output',dest='verbose')

	args = parser.parse_args()

	if args.subcommand == 'puppet':
		puppet(parser,args,config)
	elif args.subcommand == 'backup':
		backup(parser,args,config)
	elif args.subcommand == 'update':
		update(parser,args,config)
	elif args.subcommand == 'system':
		system(parser,args,config)
	elif args.subcommand == 'version':
		version(parser,args,config)
	else:
		print 'Unrecognised subcommand "' + args.subcommand + '"'
		parser.print_help()

################################################################################

if __name__ == "__main__":
	main()
