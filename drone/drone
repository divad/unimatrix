#!/usr/bin/python

CONFIG_FILE = "/etc/soton/drone.conf"
BASE_DIR    = "/etc/soton"
VERSION     = "2017-01-30-1"

import os
import sys
import argparse
import subprocess
import ConfigParser
import datetime
import requests
import re
import platform
import getpass
import time
import json

################################################################################

def fatal(code,message):
	sys.stderr.write("Error: " + message + "\n")
	sys.exit(code)

################################################################################

def fatalex(code,message,exception):
	sys.stderr.write("Error: " + message + " - " + str(type(exception)) + " " + str(exception) + "\n")
	sys.exit(code)

################################################################################

def strtime(when=None):
	if when is None:
		dt = datetime.datetime.utcnow()
	else:
		dt = datetime.datetime.utcfromtimestamp(int(when))

	return dt.strftime("%Y-%m-%d %H:%M:%S")

################################################################################

def get_config():
	config = ConfigParser.RawConfigParser()

	## Set up default sections
	config.add_section('backup')
	config.add_section('puppet')
	config.add_section('server')
	config.add_section('ssh')
	config.add_section('reskit')
	config.add_section('csw')
	config.add_section('update')
	
	## Set up default values
	config.set('backup','user','backup')
	config.set('backup','server','localhost')
	config.set('backup','rsyncd_port','873')
	config.set('backup','port','9999')
	config.set('backup','vgname','sysvg')
	config.set('backup','lv_source_name','home')
	config.set('backup','lv_snap_name','homesnap')
	config.set('backup','lv_snap_mount','/mnt/homesnap')

	config.set('puppet','user','puppet')
	config.set('puppet','binary','/opt/puppetlabs/bin/puppet')
	config.set('puppet','server','localhost')

	config.set('reskit','pkgdir','/etc/reskit/packages/')
	config.set('reskit','server','localhost')
	config.set('reskit','share','reskit')

	config.set('csw','server','localhost')

	config.set('update','pkcon_binary','/bin/pkcon')

	config.set('ssh','binary','/usr/bin/ssh')

	config.set('server','api_key','unset')

	try:
		config.read(CONFIG_FILE)
	except Exception as ex:
		fatalex(2,"Could not read the config file " + CONFIG_FILE,ex)

	return config

################################################################################

def sysexec(command,shell=False,debug=False):
	if debug:
		if type(command) is list:
			print "Executing command " + str(" ".join(command))
		else:
			print "Executing command " + str(command)

	try:
		proc = subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.STDOUT,shell=shell)
		(stdoutdata, stderrdata) = proc.communicate()
		if stdoutdata is None:
			stdoutdata = ""

		if debug:
			print "return code: " + str(proc.returncode)
			print "---"
			print stdoutdata
			print "---"
			
		return (proc.returncode,str(stdoutdata))
	except Exception as ex:
		return (1,str(type(ex)) + " " + str(ex))

################################################################################
################################################################################

def puppet_sync(parser,args,config):
	if args.verbose: print "starting sync"

	(code, output) = sysexec("""/usr/bin/rsync -e "ssh -i %s/ssh_private_key -o PreferredAuthentications=publickey -oStrictHostKeyChecking=no" -av --delete %s@%s: %s/puppet/""" % (BASE_DIR, config.get('puppet','user'),config.get('puppet','server'),BASE_DIR),shell=True,debug=args.debug)

	if code != 0:
		fatal(3,"sync failed: \n" + output)
	else:
		if args.verbose: print "sync complete"

################################################################################

def puppet_apply(parser,args,config):
	if args.verbose: print "starting puppet apply"

	(code, output) = sysexec("""%s apply --detailed-exitcodes --modulepath %s/puppet/modules/ %s/puppet/manifests/site.pp""" % (config.get('puppet','binary'),BASE_DIR,BASE_DIR),shell=True,debug=args.debug)

	uts = int(time.time())
	when = "puppet apply last ran at " + strtime() + "\n"

	if code == 0:
		status = "system complies with policy, no changes were required"
		if args.verbose: print status
	elif code == 2:
		status = "system complies with policy, changes made to system:"
		status = status + "\n" + output
		if args.verbose: print status

	else:
		status = "apply failed: \n" + output
		puppet_save_state(uts,code,output)
		fatal(4,status)

	puppet_save_state(uts,code,output)

################################################################################

def puppet_save_state(uts,code,output):
	data = {'when': uts, 'code': code, 'output': output}

	try:
		if not os.path.exists(BASE_DIR + "/state"):
			os.mkdir(BASE_DIR + "/state")
	except Exception as ex:
		sys.stderr.write("Warning! Could not create directory " + BASE_DIR + "/state - unable to save puppet status")
		return

	try:
		with open(BASE_DIR + "/state/puppet","w") as fp:
			json.dump(data,fp)
	except Exception as ex:
		sys.stderr.write("Warning! Could not write to " + BASE_DIR + "/state/puppet:" + str(type(ex)) + " " + str(ex))

################################################################################

def puppet_get_state(parser,args,config):
	status_file = BASE_DIR + "/state/puppet" 

	if os.path.exists(status_file):
		try:
			with open(status_file,"r") as fp:
				data = json.load(fp)
		except Exception as ex:
			fatalex(5,"Could not read from puppet status file " + status_file,ex)

		try:
			print "the last puppet apply finished at " + strtime(data['when'])

			if data['code'] == 0:
				print "system was in compliance with the system policy"
			elif data['code'] == 2:
				print "changes were made to the system to comply with the system policy:"
				print data['output'].rstrip("\n")
			else:
				print "the attempt to apply the system policy failed:"
				print data['output'].rstrip("\n")

		except Exception as ex:
			fatalex(30,"Could not load puppet status",ex)

	else:
		print "puppet apply has never been run on this system"

################################################################################

def puppet_facts(parser,args,config):

	(code, output) = sysexec("""%s facts find --modulepath %s/puppet/modules/""" % (config.get('puppet','binary'),BASE_DIR),shell=True,debug=args.debug)

	if code == 0:
		print output
	else:
		fatal(27,"Could not retrieve facts: \n" + output)

################################################################################

def puppet(parser,args,config):
	action = args.action

	if action == 'sync':
		puppet_sync(parser,args,config)

	elif action == "apply":
		puppet_apply(parser,args,config)

	elif action == "run":
		puppet_sync(parser,args,config)
		puppet_apply(parser,args,config)

	elif action == "status":
		puppet_get_state(parser,args,config)

	elif action == "facts":
		puppet_facts(parser,args,config)

	else:
		print 'Unrecognised or missing action'
		parser.print_help()

################################################################################
################################################################################

def backup_now(parser,args,config):
	if args.verbose: print "starting backup (this may take several minutes)"

	uts = int(time.time())
	## Ensure the mount point for the snapshot exists
	if args.debug: print "checking config.backup.lv_snap_mount path"
	if not os.path.exists(config.get('backup','lv_snap_mount')):
		backup_save_state(uts,-1,"The lv_snap_mount directory does not exist")
		fatal(20,"The lv_snap_mount directory - " + config.get('backup','lv_snap_mount') + " - does not exist")

	## Create the snapshot of home
	if args.debug: print "creating snapshot"
	(code, output) = sysexec("""/sbin/lvcreate -n %s -kn -s %s/%s""" % (config.get('backup','lv_snap_name'), config.get('backup','vgname'), config.get('backup','lv_source_name'),),shell=True,debug=args.debug)

	if code == 0:
		if args.verbose: print "snapshot created"
	else:
		backup_save_state(uts,-1,"Could not create disk snapshot: \n" + output)
		fatal(21,"Could not create snapshot:\n" + output)

	## Mount it
	if args.debug: print "mounting snapshot"
	(code, output) = sysexec("""/bin/mount -o ro,nouuid /dev/mapper/%s-%s %s""" % (config.get('backup','vgname'), config.get('backup','lv_snap_name'), config.get('backup','lv_snap_mount'),),shell=True,debug=args.debug)

	if code == 0:
		if args.verbose: print "snapshot mounted"
	else:
		backup_save_state(uts,-1,"Could not mount disk snapshot: \n" + output)
		fatal(21,"Could not mount snapshot:\n" + output)

	## k we're ready! start the backup!
	uts = int(time.time())
	(code, output) = sysexec("""%s %s@%s -i %s/ssh_private_key -o "ExitOnForwardFailure yes" -R %s:localhost:%s """ % (config.get('ssh','binary'), config.get('backup','user'), config.get('backup','server'), BASE_DIR, config.get('backup','port'),config.get('backup','rsyncd_port'),),shell=True,debug=args.debug)

	fail = False
	if code == 0:
		status = "backup complete, all files backed up"
		backup_save_state(uts,code)
	elif code == 1:
		status = "backup partially complete, some files did not backup"
		backup_save_state(uts,code)
	else:
		fail = True # we use this later to exit with an error
		status = "backup failed"
		backup_save_state(uts,code,output)

	if args.verbose: print status

	if args.debug: print "unmounting snapshot"
	## Now we umount the snapshot and delete it as we don't need it anymore
	(code, output) = sysexec("""/bin/umount %s""" % (config.get('backup','lv_snap_mount'),),shell=True,debug=args.debug)

	if code == 0:
		if args.verbose: print "snapshot unmounted"
	else:
		fatal(22,"Could not unmount snapshot:\n" + output)

	## Create the snapshot of home
	if args.debug: print "removing snapshot"
	(code, output) = sysexec("""/sbin/lvremove -f %s/%s""" % (config.get('backup','vgname'), config.get('backup','lv_snap_name'),),shell=True,debug=args.debug)

	if code == 0:
		if args.verbose: print "snapshot removed"
	else:
		fatal(23,"Could not delete snapshot:\n" + output)

	# fatal exit if the backup failed
	if fail:
		fatal(24,status)

################################################################################

def backup_save_state(uts,code,output=None):
	data = {'when': uts, 'code': code, 'output': output}

	try:
		if not os.path.exists(BASE_DIR + "/state"):
			os.mkdir(BASE_DIR + "/state")
	except Exception as ex:
		sys.stderr.write("Warning! Could not create directory " + BASE_DIR + "/state - unable to save backup status")
		return

	try:
		with open(BASE_DIR + "/state/backup","w") as fp:
			json.dump(data,fp)
	except Exception as ex:
		sys.stderr.write("Warning! Could not write to " + BASE_DIR + "/state/backup:" + str(type(ex)) + " " + str(ex))

################################################################################

def backup_load_state():
	status_file = BASE_DIR + "/state/backup" 

	if os.path.exists(status_file):
		try:
			with open(status_file,"r") as fp:
				data = json.load(fp)
		except Exception as ex:
			fatalex(5,"Could not read from backup status file " + status_file,ex)

		try:
			code = data['code']
			when = data['when']
			if 'output' in data:
				output = data['output']
			else:
				output = None
		except Exception as ex:
			fatalex(29,"Could not load backup status",ex)

	else:
		code   = None
		when   = None
		output = None

	return (code,when,output)

################################################################################

def backup_get_state(parser,args,config):

	(code,when,output) = backup_load_state()

	if code is not None:

		print "the last backup attempt was made at " + strtime(when)

		if code == 0:
			print "the last backup competed successfully, all files were backed up"
		elif code == 1:
			print "the last backup completed but some files could not be backed up"
		else:
			print "the last backup failed"
			if output is not None:
				print output
	else:
		print "a backup has never been run on this system"

################################################################################

def backup_ifneeded(parser,args,config):
	if args.debug: print "checking for last backup"
	(code,when) = backup_load_state()

	if code is None:
		if args.verbose: print "no backup status found, triggering backup"
		backup_now(parser,args,config)
	else:
		last = datetime.datetime.utcfromtimestamp(int(when))

		if (datetime.datetime.utcnow() - last) > datetime.timedelta(hours=12):
			if args.verbose: print "backup is required, triggering backup"
			backup_now(parser,args,config)
		else:
			if args.verbose: print "backup is not required"

################################################################################

def backup(parser,args,config):
	action = args.action

	if action == 'now':
		backup_now(parser,args,config)

	elif action == "status":
		backup_get_state(parser,args,config)

	elif action == "ifneeded":
		backup_ifneeded(parser,args,config)

	else:
		print 'Unrecognised or missing action'
		parser.print_help()

################################################################################
################################################################################

def update_trigger(parser,args,config):

	if args.verbose: print "downloading package updates"
	(code, output) = sysexec([config.get('update','pkcon_binary'), "--only-download", "update"],debug=args.debug)

	if code == 0:
		if args.verbose: print "package updates downloaded"
	else:
		fatal(28,"Could not download package updates:\n" + output)

	if args.verbose: print "triggering offline update"
	(code, output) = sysexec([config.get('update','pkcon_binary'), "offline-trigger"],debug=args.debug)

	if code == 0:
		if args.verbose: print "the system will update at the next reboot"
	else:
		fatal(29,"Could not trigger the offline update:\n" + output)

################################################################################

def update_status(parser,args,config):

	(code, output) = sysexec([config.get('update','pkcon_binary'), "offline-get-prepared"],debug=args.debug)
	print output.rstrip("\n")

################################################################################

def update_history(parser,args,config):

	(code, output) = sysexec([config.get('update','pkcon_binary'), "offline-status"],debug=args.debug)
	print output.rstrip("\n")

################################################################################

def update(parser,args,config):
	action = args.action

	if action == 'status':
		update_status(parser,args,config)

	elif action == 'history':
		update_history(parser,args,config)

	elif action == "trigger":
		update_trigger(parser,args,config)

	else:
		print 'Unrecognised or missing action'
		parser.print_help()

################################################################################
################################################################################

def reskit_update(parser,args,config):
	if args.verbose: print "starting reskit update (this may take several minutes)"

	reskit_pkg_dir = config.get('reskit','pkgdir')

	if args.debug: print "checking config.reskit.pkgdir"
	if not os.path.exists(reskit_pkg_dir):
		fatal(25,"The reskit pkgdir directory - " + reskit_pkg_dir + " - does not exist")
	if not os.path.isdir(reskit_pkg_dir):
		fatal(26,"The reskit pkgdir path - " + reskit_pkg_dir + " - is not a directory")

	reskit_files = [f for f in os.listdir(reskit_pkg_dir) if os.path.isfile(os.path.join(reskit_pkg_dir, f))]

	for f in reskit_files:

		fp = os.path.join(reskit_pkg_dir,f)

		if args.debug: 
			command = [fp,"1"]
		else:
			command = [fp]

		if args.debug: print "executing " + fp

		(code, output) = sysexec(command,debug=args.debug)

		if code != 0:
			if args.verbose:
				print "reskit update failed on " + fp + ":\n" + output

	if args.verbose: print "reskit update complete"

################################################################################

def reskit_list(parser,args,config):
	reskit_pkg_dir = config.get('reskit','pkgdir')

	if args.debug: print "checking config.reskit.pkgdir"
	if not os.path.exists(reskit_pkg_dir):
		fatal(25,"The reskit pkgdir directory - " + reskit_pkg_dir + " - does not exist")
	if not os.path.isdir(reskit_pkg_dir):
		fatal(26,"The reskit pkgdir path - " + reskit_pkg_dir + " - is not a directory")

	reskit_files = [f for f in os.listdir(reskit_pkg_dir) if os.path.isfile(os.path.join(reskit_pkg_dir, f))]

	for f in reskit_files:

		print f

################################################################################

def reskit(parser,args,config):
	action = args.action

	if action == 'update':
		reskit_update(parser,args,config)
	elif action == 'list':
		reskit_list(parser,args,config)
	else:
		print 'Unrecognised or missing action'
		parser.print_help()

################################################################################
################################################################################

def system_register(parser,args,config):

	## work out OS version
	(distname, distversion, distid) = platform.linux_distribution()

	if distid == 'Maipo':
		ident = 'rhel7'
		if args.verbose: print "Detected operating system as RHEL/CentOS 7: " + distname + " " + distversion + " " + distid
	else:
		fatal(7,"Your operating system is not supported. Detected as: " + distname + " " + distversion + " " + distid)
		return False

	## Now get the hostname
	register_hostname = platform.node()
	if args.verbose: print "Detected hostname as " + register_hostname

	if not re.match(r"^(uos|iss|lnx|UOS|ISS|LNX)\-[0-9]{2,8}$",register_hostname):
		fatal(8,"The hostname of this machine is invalid. It must be of the form uos-<number>")

	register_username = raw_input("Username: ")
	register_password = getpass.getpass()

	register_url = config.get('server','address')

	# Ensure trailing slash on the server register URL
	if not register_url.endswith("/"):
		register_url = register_url + "/"

	register_url = register_url + "api/v1/register"

	if args.debug: 
		if config.getboolean('server','verify'):
			print "SSL certificate verification enabled"
		else:
			print "SSL certificate verification disabled"

	if args.verbose: print "Registering with API endpoint " + register_url

	try:
		payload = {'ident': ident, 'hostname': register_hostname, 'username': register_username, 'password': register_password}
		r = requests.post(register_url, data=payload, verify = config.getboolean('server','verify'))
	except Exception as ex:
		fatalex(8,"Unable to contact registration server",ex)

	if args.debug: print "return code " + str(r.status_code)

	if r.status_code == 200:
		try:
			json = r.json()

			if 'error' in json:
				fatal(10,"registration server returned an error: " + json['reason'])

			else:
				if args.verbose: print "Registration server accepted our request"

		except Exception as ex:
			fatalex(11,"failed to parse reponse from registration server",ex)

	else:
		fatal(12,"unexpected HTTP return code from server: " + str(r.status_code))

	# Save the SSH public key
	if args.debug: print "Saving SSH public key to " + BASE_DIR + "/ssh_public_key"
	try:
		with open(BASE_DIR + '/ssh_public_key', 'w') as f:
			f.write(json['public_key'])
			f.write("\n")
	except Exception as ex:
		fatalex(13,"Failed to write to " + BASE_DIR + "/ssh_public_key",ex)

	if args.verbose: print "Saved SSH public key to " + BASE_DIR + "/ssh_public_key"

	# Save the SSH private key
	if args.debug: print "Saving SSH private key to " + BASE_DIR + "/ssh_private_key"
	try:
		with open(BASE_DIR + '/ssh_private_key', 'w') as f:
			f.write(json['private_key'])
	except Exception as ex:
		fatalex(14,"Failed to write to " + BASE_DIR + "/ssh_private_key",ex)

	if args.verbose: print "Saved SSH private key to " + BASE_DIR + "/ssh_private_key"

	# Set perms on the key
	if args.debug: print "Setting permissions on " + BASE_DIR + "/ssh_private_key"
	try:
		os.chmod(BASE_DIR + '/ssh_private_key', 0600)
	except Exception as ex:
		fatalex(15,"Failed to set the permissions of " + BASE_DIR + "/ssh_private_key",ex)

	if args.verbose: print "Set permissions on " + BASE_DIR + "/ssh_private_key"

	# Save the backup key (for rsyncd)
	if args.debug: print "Saving the backup key to " + BASE_DIR + "/backup_key"
	try:
		with open(BASE_DIR + '/backup_key', 'w') as f:
			f.write("backup:" + json['backup_key'] + "\n")
	except Exception as ex:
		fatalex(16,"Failed to write to " + BASE_DIR + "/backup_key",ex)

	if args.verbose: print "Saved backup key to " + BASE_DIR + "/backup_key"

	# Set perms on the key
	if args.debug: print "Setting permissions on " + BASE_DIR + "/backup_key"
	try:
		os.chmod(BASE_DIR + '/backup_key', 0600)

	except Exception as ex:
		fatalex(17,"Failed to set the permissions of " + BASE_DIR + "/backup_key",ex)

	if args.verbose: print "Set permissions on " + BASE_DIR + "/backup_key"

	## Merge the new settings into the existing config
	config.set('backup','port',json['backup_port'])
	config.set('server','api_key',json['api_key'])

	if args.debug: print "Saving changes to the drone config file " + BASE_DIR + "/drone.conf"
	try:
		with open(BASE_DIR + '/drone.conf', 'w') as f:
			config.write(f)
	except Exception as ex:
		fatalex(18,"Failed to write to " + BASE_DIR + "/drone.conf",ex)

	if args.verbose: print "Saved drone configuration to " + BASE_DIR + "/drone.conf"

	# Set perms on the drone config
	if args.debug: print "Setting permissions on " + BASE_DIR + "/drone.conf"
	try:
		os.chmod(BASE_DIR + '/drone.conf', 0600)
	except Exception as ex:
		fatalex(19,"Failed to set the permissions of " + BASE_DIR + "/drone.conf",ex)

	print "Registration completed successfully"

################################################################################

def system(parser,args,config):
	action = args.action

	if action == 'register':
		system_register(parser,args,config)
	else:
		print 'Unrecognised or missing action'
		parser.print_help()

################################################################################

def version(parser,args,config):
	print "drone agent v" + VERSION

################################################################################

def main():
	## We must be root
	if not os.geteuid() == 0:
		fatal(1,"You must be root to run this command")

	## Load the config
	config = get_config()

	## Deal with command line arguments
	subcommands = """Available subcommands:

  puppet      manages puppet functions
    status    show the status of the last puppet apply
    sync      download the latest puppet ruleset
    apply     apply puppet policy to the system
    run       performs a 'sync' and then an 'apply'
    facts     show puppet facts about the system

  backup      management of workstation backups
    status    show the status of the last backup
    now       perform a backup of this system
    ifneeded  perform a backup of this system if the last backup attempt
              was over 12 hours ago. it is intended that you run this 
              when the system is finished starting up.

  update
    trigger   schedule an offline system update to occur at the next reboot
    history   show the result of the last offline update
    status    show the packages due to be updated (if any) at next reboot

  reskit
    update    update the contents of reskit software packages
    list      list installed reskit software packages

  system
    register  (re-)register this system

  version     shows the version of the drone agent

"""

	parser = argparse.ArgumentParser(prog='drone',description='workstation management agent',epilog=subcommands,formatter_class=argparse.RawDescriptionHelpFormatter)
	parser.add_argument('subcommand', metavar='subcommand', type=str, help='the function to perform')
	parser.add_argument('action', metavar='action', type=str, help='the action to perform', nargs="?", default=None)
	parser.add_argument('-d', '--debug', action='store_true', help='turn on debugging output',dest='debug')
	parser.add_argument('-v', '--verbose', action='store_true', help='turn on verbose output',dest='verbose')

	args = parser.parse_args()

	if args.subcommand == 'puppet':
		puppet(parser,args,config)
	elif args.subcommand == 'backup':
		backup(parser,args,config)
	elif args.subcommand == 'update':
		update(parser,args,config)
	elif args.subcommand == 'reskit':
		reskit(parser,args,config)
	elif args.subcommand == 'system':
		system(parser,args,config)
	elif args.subcommand == 'version':
		version(parser,args,config)
	else:
		print 'Unrecognised subcommand "' + args.subcommand + '"'
		parser.print_help()

################################################################################

if __name__ == "__main__":
	main()
